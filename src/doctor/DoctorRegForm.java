/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package doctor;

import com.formdev.flatlaf.FlatIntelliJLaf;
import static common.CommonFunctions.getMinDate;
import static common.CommonFunctions.getSelectedBirthDate;
import home.HomeForm;
import java.awt.Color;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;
import logIn.LogInForm;
import static validation.Validation.selectFieldValidation;
import static validation.Validation.txtAreaValidation;
import static validation.Validation.txtFieldValidation;

/**
 *
 * @author Achinthya Dulshan
 */
public class DoctorRegForm extends javax.swing.JFrame {

    DoctorDao doctorDao;

    //define static variables for future refrence
    private static DoctorRegForm updatingDoctorForm;
    private static Doctor updatingDoctor;
    private static Doctor doctor = new Doctor();

    //define validation borders
    public static Border invalidBorder = new LineBorder(Color.red, 2, true);
    public static Border validBorder = new LineBorder(Color.GREEN, 2, true);

    //default constructor
    public DoctorRegForm() {
        initComponents();
        // init doctorDao object
        doctorDao = new DoctorDao();
        // init doctor object 
//        doctor = new Doctor();

        // set update button invisible
        btnUpdate.setVisible(false);

        // try to set min,max date on date of birth date picker
        // max date --> Today
        // min date --> set by getMinDate()
        try {
            txtDateofBirth.setSelectableDateRange(getMinDate(), new java.util.Date());
        } catch (ParseException ex) {
            Logger.getLogger(DoctorRegForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtLastName = new javax.swing.JTextField();
        txtContact_2 = new javax.swing.JTextField();
        formHeading = new javax.swing.JLabel();
        selectGender = new javax.swing.JComboBox<>();
        txtContact_1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAddress = new javax.swing.JTextArea();
        txtFirstName = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtNIC = new javax.swing.JTextField();
        txtLicenseNo = new javax.swing.JTextField();
        txtDateofBirth = new com.toedter.calendar.JDateChooser();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnShowDoctorDetails = new javax.swing.JButton();
        btnReturnToHome = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        headerPanel = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        btnClose = new javax.swing.JButton();
        btnLogOut = new javax.swing.JButton();
        selectSpecialization = new javax.swing.JComboBox<>();
        bgImage = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI Semibold", 0, 16)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("First Name :");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 290, 89, -1));

        jLabel2.setFont(new java.awt.Font("Segoe UI Semibold", 0, 16)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Last Name :");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 290, -1, -1));

        jLabel3.setFont(new java.awt.Font("Segoe UI Semibold", 0, 16)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Address :");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 340, -1, -1));

        jLabel8.setFont(new java.awt.Font("Segoe UI Semibold", 0, 16)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Contact No :");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 560, -1, -1));

        jLabel6.setFont(new java.awt.Font("Segoe UI Semibold", 0, 16)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Date of Birth :");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 460, -1, -1));

        jLabel9.setFont(new java.awt.Font("Segoe UI Semibold", 0, 16)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Specialization :");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 510, -1, -1));

        jLabel7.setFont(new java.awt.Font("Segoe UI Semibold", 0, 16)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Contact No :");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 560, -1, -1));

        jLabel5.setFont(new java.awt.Font("Segoe UI Semibold", 0, 16)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Gender :");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 410, -1, -1));

        jLabel4.setFont(new java.awt.Font("Segoe UI Semibold", 0, 16)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("NIC :");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 410, -1, -1));

        txtLastName.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        txtLastName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtLastNameKeyReleased(evt);
            }
        });
        getContentPane().add(txtLastName, new org.netbeans.lib.awtextra.AbsoluteConstraints(1050, 290, 210, 30));

        txtContact_2.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        txtContact_2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtContact_2KeyReleased(evt);
            }
        });
        getContentPane().add(txtContact_2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1050, 560, 210, 30));

        formHeading.setFont(new java.awt.Font("Segoe UI Semibold", 0, 36)); // NOI18N
        formHeading.setForeground(new java.awt.Color(255, 255, 255));
        formHeading.setText("Doctor Registration");
        getContentPane().add(formHeading, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 100, 360, 50));

        selectGender.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        selectGender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Gender", "Male", "Female" }));
        selectGender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectGenderActionPerformed(evt);
            }
        });
        getContentPane().add(selectGender, new org.netbeans.lib.awtextra.AbsoluteConstraints(1050, 410, 210, 30));

        txtContact_1.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        txtContact_1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtContact_1KeyReleased(evt);
            }
        });
        getContentPane().add(txtContact_1, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 560, 210, 30));

        txtAddress.setColumns(20);
        txtAddress.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        txtAddress.setRows(5);
        txtAddress.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtAddressKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(txtAddress);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 340, 560, 50));

        txtFirstName.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        txtFirstName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtFirstNameKeyReleased(evt);
            }
        });
        getContentPane().add(txtFirstName, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 290, 210, 30));

        jLabel11.setFont(new java.awt.Font("Segoe UI Semibold", 0, 16)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("License No :");
        getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 510, -1, -1));

        txtNIC.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        txtNIC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtNICKeyReleased(evt);
            }
        });
        getContentPane().add(txtNIC, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 410, 210, 30));

        txtLicenseNo.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        txtLicenseNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtLicenseNoKeyReleased(evt);
            }
        });
        getContentPane().add(txtLicenseNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(1050, 510, 210, 30));
        getContentPane().add(txtDateofBirth, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 460, 210, -1));

        btnAdd.setFont(new java.awt.Font("Segoe UI Semibold", 0, 16)); // NOI18N
        btnAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons/add.png"))); // NOI18N
        btnAdd.setText(" REGISTER");
        btnAdd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAddMouseClicked(evt);
            }
        });
        getContentPane().add(btnAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 240, 200, 50));

        btnUpdate.setFont(new java.awt.Font("Segoe UI Semibold", 0, 16)); // NOI18N
        btnUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons/update.png"))); // NOI18N
        btnUpdate.setText(" UPDATE");
        btnUpdate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnUpdateMouseClicked(evt);
            }
        });
        getContentPane().add(btnUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 310, 200, 50));

        btnShowDoctorDetails.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        btnShowDoctorDetails.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons/doctor.png"))); // NOI18N
        btnShowDoctorDetails.setText(" Show Doctor Details");
        btnShowDoctorDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowDoctorDetailsActionPerformed(evt);
            }
        });
        getContentPane().add(btnShowDoctorDetails, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 540, 250, 50));

        btnReturnToHome.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        btnReturnToHome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons/home.png"))); // NOI18N
        btnReturnToHome.setText(" Return to Home");
        btnReturnToHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReturnToHomeActionPerformed(evt);
            }
        });
        getContentPane().add(btnReturnToHome, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 600, 250, 50));

        jSeparator1.setForeground(new java.awt.Color(204, 0, 204));
        getContentPane().add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 160, 860, 20));

        headerPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel10.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        jLabel10.setText("Medical Center Management System");
        headerPanel.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 228, -1));

        btnClose.setBackground(new java.awt.Color(255, 255, 255));
        btnClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons/close.png"))); // NOI18N
        btnClose.setToolTipText("Close Application");
        btnClose.setBorder(null);
        btnClose.setBorderPainted(false);
        btnClose.setContentAreaFilled(false);
        btnClose.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });
        headerPanel.add(btnClose, new org.netbeans.lib.awtextra.AbsoluteConstraints(1370, 0, 30, 30));

        btnLogOut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons/logout.png"))); // NOI18N
        btnLogOut.setToolTipText("Log out");
        btnLogOut.setBorder(null);
        btnLogOut.setBorderPainted(false);
        btnLogOut.setContentAreaFilled(false);
        btnLogOut.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnLogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogOutActionPerformed(evt);
            }
        });
        headerPanel.add(btnLogOut, new org.netbeans.lib.awtextra.AbsoluteConstraints(1330, 0, 30, 30));

        getContentPane().add(headerPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1400, 30));

        selectSpecialization.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        selectSpecialization.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select the type of Doctor", "General Practitioner (GP) or Family Physician", "Otolaryngologist (ENT Specialist)", "Neurologist", "Dermatologist", "Cardiologist" }));
        selectSpecialization.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectSpecializationActionPerformed(evt);
            }
        });
        getContentPane().add(selectSpecialization, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 510, 210, -1));

        bgImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/backgrounds/doctorRegister.png"))); // NOI18N
        getContentPane().add(bgImage, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1400, 750));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    // when click on Show Patient Details button
    private void btnShowDoctorDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowDoctorDetailsActionPerformed
        new DoctorDetailsForm().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnShowDoctorDetailsActionPerformed

    private void btnReturnToHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReturnToHomeActionPerformed
        //show Home page and close this one
        new HomeForm().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnReturnToHomeActionPerformed

    private void btnAddMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddMouseClicked

        // setAddress in doctor
//        doctor.setAddress(txtAddress.getText());
        // setDateOfBirth in patient
        doctor.setDateOfBirth(getSelectedBirthDate(txtDateofBirth));

        /* when the txtContact_2(optional) field is empty it will store NULL in database, 
        in update this will be an error therefore it set to empty String*/
        if (txtContact_2.getText().equals("")) {
            doctor.setContactNo_2("");
        }

        // checking form has empty fields
        String errors = checkErrors(doctor);

        if (errors.equals("")) {

            // if it doesn't have empty field 
            // insert to database and give message
            doctorDao.insertMedicalStaff(doctor);
            JOptionPane.showMessageDialog(null, "Doctor Registered Successfully.");

            new DoctorDetailsForm().setVisible(true);
            this.dispose();
        } else {
            // if it have empty fields indicate using message
            JOptionPane.showMessageDialog(null, "You have following errors.\n" + errors);
        }


    }//GEN-LAST:event_btnAddMouseClicked

    private void txtFirstNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFirstNameKeyReleased
        String pattern = "^([A-Z][a-z]{3,25})$";
        txtFieldValidation(txtFirstName, pattern, doctor, "setFirstName");
    }//GEN-LAST:event_txtFirstNameKeyReleased

    private void txtLastNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtLastNameKeyReleased
        String pattern = "^([A-Z][a-z]{3,25})$";
        txtFieldValidation(txtLastName, pattern, doctor, "setLastName");
    }//GEN-LAST:event_txtLastNameKeyReleased

    private void txtNICKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNICKeyReleased
        String pattern = "^([12][09][01789][0-9]{9})|([789][0-9]{8}[V|v])$";
        txtFieldValidation(txtNIC, pattern, doctor, "setNIC");
    }//GEN-LAST:event_txtNICKeyReleased

    private void txtLicenseNoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtLicenseNoKeyReleased
        String pattern = "^(.*)$";
        txtFieldValidation(txtLicenseNo, pattern, doctor, "setLicenseNumber");
    }//GEN-LAST:event_txtLicenseNoKeyReleased

    private void txtContact_1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtContact_1KeyReleased
        String pattern = "^([0][7][01245678][0-9]{7})|([0][012345689][0-9]{8})$";
        txtFieldValidation(txtContact_1, pattern, doctor, "setContactNo_1");
    }//GEN-LAST:event_txtContact_1KeyReleased

    private void txtContact_2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtContact_2KeyReleased
        String pattern = "^([0][7][01245678][0-9]{7})|([0][012345689][0-9]{8})$";
        txtFieldValidation(txtContact_2, pattern, doctor, "setContactNo_2");
    }//GEN-LAST:event_txtContact_2KeyReleased


    private void btnUpdateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnUpdateMouseClicked

        // get staffId to future refrences
        doctor.setStaffId(updatingDoctor.getStaffId());

        //set values to object
        doctor.setDateOfBirth(getSelectedBirthDate(txtDateofBirth));

        if (txtContact_2.getText().equals("")) {
            doctor.setContactNo_2("");
        }

        // check what values were updated
        String updates = checkUpdates(doctor);

        // check whether reqiured fields have empty values
        String errors = checkErrors(doctor);

        if (errors.equals("")) {

            // if required fields are filled
            if (updates == "") {
                // if it doesn't update any value --> show message
                JOptionPane.showMessageDialog(this, "No updates have been done.");

            } else {
                // if it update any value --> show message with updated fields
                int result = JOptionPane.showConfirmDialog(this, updates);

                // Check the user's choice
                if (result == JOptionPane.YES_OPTION) {

                    //perform update & load doctor table
                    doctorDao.updateDoctor(doctor);
                    new DoctorDetailsForm().setVisible(true);
                    this.dispose();

                } else if (result == JOptionPane.NO_OPTION) {

                } else if (result == JOptionPane.CANCEL_OPTION) {

                    //reload Patient details form and abort action
                    new DoctorDetailsForm().setVisible(true);
                    this.dispose();

                } else if (result == JOptionPane.CLOSED_OPTION) {

                }
            }

        } else {
            JOptionPane.showMessageDialog(this, "You have following errors.\n" + errors);
        }

    }//GEN-LAST:event_btnUpdateMouseClicked

    private void selectGenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectGenderActionPerformed

        try {
            selectFieldValidation(selectGender, "Select Gender", doctor, "setGender");
        } catch (NoSuchMethodException ex) {
            Logger.getLogger(DoctorRegForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(DoctorRegForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalArgumentException ex) {
            Logger.getLogger(DoctorRegForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvocationTargetException ex) {
            Logger.getLogger(DoctorRegForm.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_selectGenderActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        ImageIcon icon = new ImageIcon("D:\\Projects\\COST Project\\MedicalCenterManagementSystem\\src\\images\\icons\\warning.png");
        //        int res = JOptionPane.showConfirmDialog(null, "Are you sure to exit ?", "Exit", JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE);
        int res = JOptionPane.showConfirmDialog(null, "Are you sure to exit ?", "Exit", JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE, icon);
        if (res == 0) {
            System.exit(res);
        } else if (res == 1) {
            //         System.out.println("Pressed NO");
        }
    }//GEN-LAST:event_btnCloseActionPerformed

    private void btnLogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogOutActionPerformed
        ImageIcon icon = new ImageIcon("D:\\Projects\\COST Project\\MedicalCenterManagementSystem\\src\\images\\icons\\logout 50.png");
        //        int res = JOptionPane.showConfirmDialog(null, "Are you sure to exit ?", "Exit", JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE);
        int res = JOptionPane.showConfirmDialog(null, "Are you sure to Log Out ?", "Log Out", JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE, icon);
        if (res == 0) {
            new LogInForm().setVisible(true);
            this.dispose();
        } else if (res == 1) {
            //         System.out.println("Pressed NO");
        }
    }//GEN-LAST:event_btnLogOutActionPerformed

    private void txtAddressKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAddressKeyReleased
        String pattern = "^(.*)$";
        txtAreaValidation(txtAddress, pattern, doctor, "setAddress");
        System.out.println("Address "+doctor.getAddress());
    }//GEN-LAST:event_txtAddressKeyReleased

    private void selectSpecializationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectSpecializationActionPerformed
        try {
            selectFieldValidation(selectSpecialization, "Select the type of Doctor", doctor, "setSpecialization");
        } catch (NoSuchMethodException ex) {
            Logger.getLogger(DoctorRegForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(DoctorRegForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalArgumentException ex) {
            Logger.getLogger(DoctorRegForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvocationTargetException ex) {
            Logger.getLogger(DoctorRegForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_selectSpecializationActionPerformed

    private String checkUpdates(Doctor existingDoctor) {

        String updates = "";

        if (!updatingDoctor.getFirstName().equals(existingDoctor.getFirstName())) {
            updates += "First name Changed. \n";
        }
        if (!updatingDoctor.getLastName().equals(existingDoctor.getLastName())) {
            updates += "Last name Changed. \n";
        }
        if (!updatingDoctor.getAddress().equals(existingDoctor.getAddress())) {
            updates += "Address Changed. \n";
        }
        if (!updatingDoctor.getNIC().equals(existingDoctor.getNIC())) {
            updates += "NIC Changed. \n";
        }
        if (!updatingDoctor.getDateOfBirth().equals(existingDoctor.getDateOfBirth())) {
            updates += "Date of Birth Changed. \n";
        }
        if (!updatingDoctor.getGender().equals(existingDoctor.getGender())) {
            updates += "Gender Changed. \n";
        }
        if (!updatingDoctor.getSpecialization().equals(existingDoctor.getSpecialization())) {
            updates += "Specialization Changed. \n";
        }
        if (!updatingDoctor.getLicenseNumber().equals(existingDoctor.getLicenseNumber())) {
            updates += "License number Changed. \n";
        }
        if (!updatingDoctor.getContactNo_1().equals(existingDoctor.getContactNo_1())) {
            updates += "Contact No:1 Changed. \n";
        }
        if (!updatingDoctor.getContactNo_2().equals(existingDoctor.getContactNo_2())) {
            updates += "Contact No:2 Changed. \n";
        }

        return updates;
    }

    private String checkErrors(Doctor doctor) {

        String errors = "";

        if (doctor.getFirstName() == null) {
            errors += "First name not entered.\n";
        }
        if (doctor.getLastName() == null) {
            errors += "Last name not entered.\n";
        }
        if (doctor.getAddress() == null || doctor.getAddress().equals("")) {
            errors += "Address not entered.\n";
        }
        if (doctor.getNIC() == null) {
            errors += "NIC not entered.\n";
        }
        if (doctor.getGender() == null) {
            errors += "Gender not selected.\n";
        }
        if (doctor.getDateOfBirth() == null) {
            errors += "Date of birth not selected.\n";
        }
        if (doctor.getSpecialization() == null) {
            errors += "Specialization not entered.\n";
        }
        if (doctor.getLicenseNumber() == null) {
            errors += "License number not entered.\n";
        }
        if (doctor.getContactNo_1() == null) {
            errors += "Contact No:1 not entered.\n";
        }

        return errors;
    }

    public void updateDoctorDetails(Doctor selectedDoctor) throws ParseException {

        doctor = new Doctor(selectedDoctor.getStaffId(), selectedDoctor.getFirstName(), selectedDoctor.getLastName(), selectedDoctor.getAddress(), selectedDoctor.getNIC(), selectedDoctor.getLicenseNumber(), selectedDoctor.getSpecialization(), selectedDoctor.getDateOfBirth(), selectedDoctor.getGender(), selectedDoctor.getContactNo_1(), selectedDoctor.getContactNo_2());
        updatingDoctor = new Doctor(selectedDoctor.getStaffId(), selectedDoctor.getFirstName(), selectedDoctor.getLastName(), selectedDoctor.getAddress(), selectedDoctor.getNIC(), selectedDoctor.getLicenseNumber(), selectedDoctor.getSpecialization(), selectedDoctor.getDateOfBirth(), selectedDoctor.getGender(), selectedDoctor.getContactNo_1(), selectedDoctor.getContactNo_2());

        if (updatingDoctorForm == null) {
            updatingDoctorForm = new DoctorRegForm();
        }

        System.out.println("name: " + selectedDoctor.getFirstName() + " " + selectedDoctor.getLastName());

        updatingDoctorForm.formHeading.setText("Update Doctor Details");

        updatingDoctorForm.txtFirstName.setText(selectedDoctor.getFirstName());
        updatingDoctorForm.txtLastName.setText(selectedDoctor.getLastName());
        updatingDoctorForm.txtAddress.setText(selectedDoctor.getAddress());
        updatingDoctorForm.txtNIC.setText(selectedDoctor.getNIC());
        updatingDoctorForm.selectGender.setSelectedItem(selectedDoctor.getGender());

        updatingDoctorForm.txtDateofBirth.setDate(new SimpleDateFormat("yyyy-MM-dd").parse(selectedDoctor.getDateOfBirth()));
        updatingDoctorForm.selectSpecialization.setSelectedItem(selectedDoctor.getSpecialization());
        updatingDoctorForm.txtLicenseNo.setText(selectedDoctor.getLicenseNumber());
        updatingDoctorForm.txtContact_1.setText(selectedDoctor.getContactNo_1());
        updatingDoctorForm.txtContact_2.setText(selectedDoctor.getContactNo_2());

        updatingDoctorForm.btnAdd.setVisible(false);
        updatingDoctorForm.btnUpdate.setVisible(true);

        updatingDoctorForm.setVisible(true);

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        FlatIntelliJLaf.setup();

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DoctorRegForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel bgImage;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnLogOut;
    private javax.swing.JButton btnReturnToHome;
    private javax.swing.JButton btnShowDoctorDetails;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel formHeading;
    private javax.swing.JPanel headerPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JComboBox<String> selectGender;
    private javax.swing.JComboBox<String> selectSpecialization;
    private javax.swing.JTextArea txtAddress;
    private javax.swing.JTextField txtContact_1;
    private javax.swing.JTextField txtContact_2;
    private com.toedter.calendar.JDateChooser txtDateofBirth;
    private javax.swing.JTextField txtFirstName;
    private javax.swing.JTextField txtLastName;
    private javax.swing.JTextField txtLicenseNo;
    private javax.swing.JTextField txtNIC;
    // End of variables declaration//GEN-END:variables
}
